//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Biblio.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderItem> OrderItem { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
    
        public virtual ObjectResult<GetAllCustomesNames_Result> GetAllCustomesNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCustomesNames_Result>("GetAllCustomesNames");
        }
    
        public virtual ObjectResult<GetProducts_Result> GetProducts(Nullable<int> supplierId)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProducts_Result>("GetProducts", supplierIdParameter);
        }
    
        public virtual int RemoveProduct(Nullable<int> prodId, Nullable<int> suppId)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var suppIdParameter = suppId.HasValue ?
                new ObjectParameter("SuppId", suppId) :
                new ObjectParameter("SuppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveProduct", prodIdParameter, suppIdParameter);
        }
    
        public virtual int EditProduct(Nullable<int> prodId, string prodName, Nullable<decimal> prodPrice, string prodPack, Nullable<bool> isDispo)
        {
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var prodNameParameter = prodName != null ?
                new ObjectParameter("ProdName", prodName) :
                new ObjectParameter("ProdName", typeof(string));
    
            var prodPriceParameter = prodPrice.HasValue ?
                new ObjectParameter("prodPrice", prodPrice) :
                new ObjectParameter("prodPrice", typeof(decimal));
    
            var prodPackParameter = prodPack != null ?
                new ObjectParameter("prodPack", prodPack) :
                new ObjectParameter("prodPack", typeof(string));
    
            var isDispoParameter = isDispo.HasValue ?
                new ObjectParameter("IsDispo", isDispo) :
                new ObjectParameter("IsDispo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditProduct", prodIdParameter, prodNameParameter, prodPriceParameter, prodPackParameter, isDispoParameter);
        }
    }
}
